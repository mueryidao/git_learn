1. Create repo
    $ mkdir learngit
    $ cd learngit
    $ pwd
    /Users/michael/learngit

    $ git init
    Initialized empty Git repository in /Users/michael/learngit/.git/

    $ git add readme.txt

    $ git commit -m "wrote a readme file"
    [master (root-commit) cb926e7] wrote a readme file
     1 file changed, 2 insertions(+)
      create mode 100644 readme.txt

    ps:
    $ git add file1.txt
    $ git add file2.txt file3.txt
    $ git commit -m "add 3 files."

    Summary:
    初始化一个Git仓库，使用git init命令。

    添加文件到Git仓库，分两步：

    第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；

    第二步，使用命令git commit，完成。

2. Time back
    $ git status
    # On branch master
    # Changes not staged for commit:
    #   (use "git add <file>..." to update what will be committed)
    #   (use "git checkout -- <file>..." to discard changes in working directory)
    #
    #    modified:   readme.txt
    #
    no changes added to commit (use "git add" and/or "git commit -a")

    $ git diff readme.txt 
    diff --git a/readme.txt b/readme.txt
    index 46d49bf..9247db6 100644
    --- a/readme.txt
    +++ b/readme.txt
    @@ -1,2 +1,2 @@
    -Git is a version control system.
    +Git is a distributed version control system.
     Git is free software.

    Summary:
    要随时掌握工作区的状态，使用git status命令。

    如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

3. Version back
   $ git log --pretty=oneline 

   $ git reset --hard HEAD^
   HEAD is now at ea34578 add distributed

   $ git reset --hard 3628164
   HEAD is now at 3628164 append GPL

   $ git reflog
   ea34578 HEAD@{0}: reset: moving to HEAD^
   3628164 HEAD@{1}: commit: append GPL
   ea34578 HEAD@{2}: commit: add distributed
   cb926e7 HEAD@{3}: commit (initial): wrote a readme file

   Summary:
   HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

   穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

   要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

4. Manage modification
    提交后，用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别：

    $ git diff HEAD -- readme.txt 
    diff --git a/readme.txt b/readme.txt
    index 76d770f..a9c5755 100644
    --- a/readme.txt
    +++ b/readme.txt
    @@ -1,4 +1,4 @@
     Git is a distributed version control system.
      Git is free software distributed under the GPL.
       Git has a mutable index called stage.
       -Git tracks changes.
       +Git tracks changes of files.

    Summary:
    Git是如何跟踪修改的，每次修改，如果不add到暂存区，那就不会加入到commit中。

5. Undo modification
    如何丢弃工作区的修改？
    git checkout -- file可以丢弃工作区的修改：
    $ git checkout -- readme.txt

    命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
    一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
    一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
    总之，就是让这个文件回到最近一次git commit或git add时的状态。

    命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区
    git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。

    Summary:
    场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
    场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
    场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

6. Delete file
    本地删除 rm test.txt
    现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：
    $ git rm test.txt
    rm 'test.txt'
    $ git commit -m "remove test.txt"
    [master d17efd8] remove test.txt
    1 file changed, 1 deletion(-)
    delete mode 100644 test.txt
    现在，文件就从版本库中被删除了。

    另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：
    $ git checkout -- test.txt
    git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

    Summary:
    命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。

7. Remote Repository
    SSH Key Create:
        ssh-keygen -t rsa -C "youremail@example.com"
    如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
    登陆GitHub，打开“Account settings”，“SSH Keys”页面,然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容.

8. Add remote repo
    登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库.
    在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库.

    可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联.
    git remote add origin git@github.com:michaelliao/learngit.git

    加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
    $ git push -u origin master
    Counting objects: 19, done.
    Delta compression using up to 4 threads.
    Compressing objects: 100% (19/19), done.
    Writing objects: 100% (19/19), 13.73 KiB, done.
    Total 23 (delta 6), reused 0 (delta 0)
    To git@github.com:michaelliao/learngit.git
    * [new branch]      master -> master
    Branch master set up to track remote branch master from origin.

    $ git push origin master

    Summary:
    要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
    关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
    此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

9. Clone from remote repo
    Summary:
    要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
    Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

10. Create and merge branch
    我们创建dev分支，然后切换到dev分支：
    $ git checkout -b dev
    Switched to a new branch 'dev'
    git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
    
    $ git branch dev
    $ git checkout dev
    Switched to branch 'dev'
    然后，用git branch命令查看当前分支：
    
    $ git branch
    * dev
    master
    git branch命令会列出所有分支，当前分支前面会标一个*号。
    
    然后，我们就可以在dev分支上正常提交，比如对readme.txt做个修改，加上一行：
    Creating a new branch is quick.
    然后提交：
    $ git add readme.txt 
    $ git commit -m "branch test"
        [dev fec145a] branch test
        1 file changed, 1 insertion(+)
    现在，dev分支的工作完成，我们就可以切换回master分支：

    $ git checkout master
    Switched to branch 'master'
    切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变.

    现在，我们把dev分支的工作成果合并到master分支上：
    $ git merge dev
    Updating d17efd8..fec145a
    Fast-forward
    readme.txt |    1 +
    1 file changed, 1 insertion(+)
    git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。
    注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。
    当然，也不是每次合并都能Fast-forward，我们后面会讲其他方式的合并。

    合并完成后，就可以放心地删除dev分支了：
    $ git branch -d dev
    Deleted branch dev (was fec145a).
    删除后，查看branch，就只剩下master分支了：

    $ git branch
    * master
    因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。

    Summary:

    Git鼓励大量使用分支：
    查看分支：git branch
    创建分支：git branch <name>
    切换分支：git checkout <name>
    创建+切换分支：git checkout -b <name>
    合并某分支到当前分支：git merge <name>
    删除分支：git branch -d <name>

11. Solve conflict

                        HEAD
                         |
                         |
                         |
                       master
                         |
                         |
                         |
    O------O------O------O
                   \
                     \
                       \
                         O
                         |
                         |
                     feature1

    merge failed:
    $ git merge feature1
    Auto-merging readme.txt
    CONFLICT (content): Merge conflict in readme.txt
    Automatic merge failed; fix conflicts and then commit the result.

    我们可以直接查看readme.txt的内容：
    Git is a distributed version control system.
    Git is free software distributed under the GPL.
    Git has a mutable index called stage.
    Git tracks changes of files.
    <<<<<<< HEAD
    Creating a new branch is quick & simple.
    =======
    Creating a new branch is quick AND simple.
    >>>>>>> feature1
    Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，我们修改如下后保存：

    Creating a new branch is quick and simple.

    再提交：
    $ git add readme.txt 
    $ git commit -m "conflict fixed"
    [master 59bc1cb] conflict fixed

    master分支和feature1分支变成了下图所示：

                               HEAD
                                |
                                |
                                |
                              master
                                |
                                |
                                |
    O------O------O------O------O
                    \         /
                      \     /
                        \ /
                         O
                         |
                         |
                     feature1

    用带参数的git log也可以看到分支的合并情况：

    $ git log --graph --pretty=oneline --abbrev-commit
    *   59bc1cb conflict fixed
    |\
    | * 75a857c AND simple
    * | 400b400 & simple
    |/
    * fec145a branch test
    ...

    最后，删除feature1分支：
    $ git branch -d feature1
    Deleted branch feature1 (was 75a857c).

    Summary:
    当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
    用git log --graph命令可以看到分支合并图。

12. Branch mgnt policy
    --no-ff参数，表示禁用Fast forward
    $ git merge --no-ff -m "merge with no-ff" dev
    Merge made by the 'recursive' strategy.
     readme.txt |    1 +
      1 file changed, 1 insertion(+)

    分支策略:
    在实际开发中，我们应该按照几个基本原则进行分支管理：
    首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
    那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
    你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。

13. Bug branch
    创建一个分支issue-101来修复bug, 当前正在dev上进行的工作还没有提交.并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。
    但是，必须在两个小时内修复该bug，怎么办？
    幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：

    $ git stash
    Saved working directory and index state WIP on dev: 6224937 add merge
    HEAD is now at 6224937 add merge.

    现在，用git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。
    首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：
    $ git checkout master
    Switched to branch 'master'
    Your branch is ahead of 'origin/master' by 6 commits.
    $ git checkout -b issue-101
    Switched to a new branch 'issue-101'

    修复bug, 修复完成后，切换到master分支，并完成合并，最后删除issue-101分支. 

    接着回到dev分支干活.
    用git stash list命令看看：
    $ git stash list
    stash@{0}: WIP on dev: 6224937 add merge

    Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
    一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
    另一种方式是用git stash pop，恢复的同时把stash内容也删了.

    可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
    $ git stash apply stash@{0}

    Summary:
    修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
    当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。

14. Feature branch
    Summary:
    开发一个新feature，最好新建一个分支；
    如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

15. Multi-work
    git remote -v显示更详细的信息：
    $ git remote -v
    origin  git@github.com:michaelliao/learngit.git (fetch)
    origin  git@github.com:michaelliao/learngit.git (push)

    push branch
    推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：
    $ git push origin master
    如果要推送其他分支，比如dev，就改成：
    $ git push origin dev

    master分支是主分支，因此要时刻与远程同步；
    dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
    bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
    feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。

    fetch branch
    你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改.
    推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，
    Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送.
    git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：
    $ git branch --set-upstream dev origin/dev
    Branch dev set up to track remote branch dev from origin.


    因此，多人协作的工作模式通常是这样：
    首先，可以试图用git push origin branch-name推送自己的修改；
    如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
    如果合并有冲突，则解决冲突，并在本地提交；
    没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
    如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
    这就是多人协作的工作模式，一旦熟悉了，就非常简单。

    Summary:
    查看远程库信息，使用git remote -v；
    本地新建的分支如果不推送到远程，对其他人就是不可见的；
    从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
    在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
    建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
    从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

16. Label mgnt
    Create label
        首先，切换到需要打标签的分支上：
        $ git branch
        * dev
          master
          $ git checkout master
          Switched to branch 'master'

        然后，敲命令git tag <name>就可以打一个新标签：
        $ git tag v1.0

        可以用命令git tag查看所有标签：
        $ git tag
        v1.0

    Summary:
    命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
    git tag -a <tagname> -m "blablabla..."可以指定标签信息；
    git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
    命令git tag可以查看所有标签。

    Label operation:
    标签打错了，也可以删除：
    $ git tag -d v0.1
    Deleted tag 'v0.1' (was e078af9)

    如果要推送某个标签到远程，使用命令git push origin <tagname>：
    $ git push origin v1.0
    Total 0 (delta 0), reused 0 (delta 0)
    To git@github.com:michaelliao/learngit.git
     * [new tag]         v1.0 -> v1.0

    或者，一次性推送全部尚未推送到远程的本地标签：
    $ git push origin --tags
    Counting objects: 1, done.
    Writing objects: 100% (1/1), 554 bytes, done.
    Total 1 (delta 0), reused 0 (delta 0)
    To git@github.com:michaelliao/learngit.git
    * [new tag]         v0.2 -> v0.2
    * [new tag]         v0.9 -> v0.9

    如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：
    $ git tag -d v0.9
    Deleted tag 'v0.9' (was 6224937)
    然后，从远程删除。删除命令也是push，但是格式如下：
    $ git push origin :refs/tags/v0.9
    To git@github.com:michaelliao/learngit.git
     - [deleted]         v0.9

    Summary:
    命令git push origin <tagname>可以推送一个本地标签；
    命令git push origin --tags可以推送全部未推送过的本地标签；
    命令git tag -d <tagname>可以删除一个本地标签；
    命令git push origin :refs/tags/<tagname>可以删除一个远程标签。




























